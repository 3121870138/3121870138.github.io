{"version":3,"file":"static/js/368.7e11c162.chunk.js","mappings":"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","sources":["pages/Data/SafetyExam/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Card, Input, Table, message, Empty } from 'antd';\nimport { SearchOutlined } from '@ant-design/icons';\nimport styles from './index.module.less';\nimport txtContent from './安全考试（使用中）.txt'\n\nconst { Search } = Input;\n\nconst SafetyExam = () => {\n  const [loading, setLoading] = useState(false);\n  const [dataSource, setDataSource] = useState([]);\n  const [searchText, setSearchText] = useState('');\n  const [filteredData, setFilteredData] = useState([]);\n  const [pagination, setPagination] = useState({\n    current: 1,\n    pageSize: 10,\n    total: 0,\n    pageSizeOptions: ['10', '20', '50', '100'],\n    showSizeChanger: true,\n    showQuickJumper: true,\n    showTotal: (total) => `共 ${total} 条数据`,\n  });\n\n  // 自定义空状态展示\n  const CustomEmpty = () => (\n    <Empty\n      image={Empty.PRESENTED_IMAGE_SIMPLE}\n      description={\n        <span>\n          {searchText ? `未找到包含 \"${searchText}\" 的内容` : '暂无数据'}\n        </span>\n      }\n    />\n  );\n\n  // 高亮文本的处理函数\n  const highlightText = (text, keyword) => {\n    if (!keyword || !text) return text;\n    const parts = text.split(new RegExp(`(${keyword})`, 'gi'));\n    return (\n      <span>\n        {parts.map((part, index) =>\n          part.toLowerCase() === keyword.toLowerCase() ? (\n            <span key={index} style={{ color: '#f50' }}>\n              {part}\n            </span>\n          ) : (\n            part\n          )\n        )}\n      </span>\n    );\n  };\n\n  // 表格列定义\n  const columns = [\n    {\n      title: '序号',\n      dataIndex: 'index',\n      key: 'index',\n      width: 80,\n      fixed: 'left',\n      render: (_, __, index) => index + 1\n    },\n    {\n      title: '内容',\n      dataIndex: 'content',\n      key: 'content',\n      // ellipsis: true,\n      render: (text) => highlightText(text, searchText)\n    },\n    {\n      title: '类型',\n      dataIndex: 'type',\n      key: 'type',\n      width: 120,\n      filters: [\n        { text: '选择题', value: '选择题' },\n        { text: '判断题', value: '判断题' }\n      ],\n      onFilter: (value, record) => record.type === value\n    }\n  ];\n\n  // 加载文件数据\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  // 搜索过滤\n  useEffect(() => {\n    filterData(searchText);\n  }, [searchText, dataSource]);\n\n  // 加载txt文件数据\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(txtContent);\n      const text = await response.text();\n      const parsedData = parseTextData(text);\n      setDataSource(parsedData);\n      setFilteredData(parsedData);\n      setPagination(prev => ({\n        ...prev,\n        total: parsedData.length\n      }));\n    } catch (error) {\n      message.error('加载数据失败');\n      console.error('加载数据错误:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 解析文本数据\n  const parseTextData = (text) => {\n    // 按行分割文本\n    const lines = text.split('\\n').filter(line => line.trim());\n    \n    // 将每行文本转换为数据对象\n    return lines.map((line, index) => {\n      // 假设文本格式为: \"类型:内容\"\n      const isXz = ['A', 'B', 'C', 'D', 'E', 'F', 'G'].some(item => line.includes(item))\n      const isPd = ['对', '错', '正确', '错误'].some(item => line.includes(item))\n      const [content = line] = line.split(':').map(str => str.trim());\n      return {\n        key: index,\n        type: isXz ? '选择题' : isPd ? '判断题' : '未分类',\n        content: content // 如果没有分隔符，整行作为内容\n      };\n    });\n  };\n\n  // 搜索过滤\n  const filterData = (value) => {\n    const filtered = dataSource.filter(item => \n      item.content.toLowerCase().includes(value.toLowerCase())\n      // item.type.toLowerCase().includes(value.toLowerCase())\n    );\n    setFilteredData(filtered);\n\n    setPagination(prev => ({\n      ...prev,\n      total: filteredData.length\n    }));\n  };\n\n  // 处理搜索\n  const handleSearch = (value) => {\n    setSearchText(value);\n  };\n\n  // 处理表格变化\n  const handleTableChange = (newPagination, filters, sorter) => {\n    setPagination(prev => ({\n      ...prev,\n      ...newPagination,\n    }));\n  };\n\n  return (\n    <div className={styles.container}>\n      <Card title=\"安全知识库\" className={styles.card}>\n        <div className={styles.searchBar}>\n          <Search\n            placeholder=\"请输入搜索内容\"\n            allowClear\n            enterButton={<SearchOutlined />}\n            size=\"large\"\n            onSearch={handleSearch}\n            onChange={(e) => handleSearch(e.target.value)}\n            className={styles.searchInput}\n          />\n          {searchText && (\n            <div className={styles.searchInfo}>\n              当前搜索：{searchText}\n              {filteredData.length > 0 ? \n                `，找到 ${filteredData.length} 条结果` : \n                '，未找到匹配内容'}\n            </div>\n          )}\n        </div>\n        \n        <Table\n          columns={columns}\n          dataSource={filteredData}\n          loading={loading}\n          pagination={pagination}\n          onChange={handleTableChange}\n          scroll={{ x: 800 }}\n          className={styles.table}\n          locale={{\n            emptyText: <CustomEmpty />\n          }}\n        />\n      </Card>\n    </div>\n  );\n};\n\nexport default SafetyExam;"],"names":["Search","Input","SafetyExam","loading","setLoading","useState","dataSource","setDataSource","searchText","setSearchText","filteredData","setFilteredData","pagination","setPagination","current","pageSize","total","pageSizeOptions","showSizeChanger","showQuickJumper","showTotal","CustomEmpty","_jsx","Empty","image","PRESENTED_IMAGE_SIMPLE","description","children","columns","title","dataIndex","key","width","fixed","render","_","__","index","text","highlightText","keyword","parts","split","RegExp","map","part","toLowerCase","style","color","filters","value","onFilter","record","type","useEffect","loadData","filterData","async","response","fetch","txtContent","parsedData","parseTextData","prev","length","error","message","console","filter","line","trim","isXz","some","item","includes","isPd","content","str","filtered","handleSearch","className","styles","container","_jsxs","Card","card","searchBar","placeholder","allowClear","enterButton","SearchOutlined","size","onSearch","onChange","e","target","searchInput","searchInfo","Table","handleTableChange","newPagination","sorter","scroll","x","table","locale","emptyText"],"sourceRoot":""}